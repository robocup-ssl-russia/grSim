cmake_minimum_required(VERSION 2.8)

set(USE_QT5 1)
if(USE_QT5)
    if(POLICY CMP0020)
        cmake_policy(SET CMP0020 NEW) # remove if CMake >= 2.8.11 required
    endif()
    if(POLICY CMP0043) # compatibility with CMake 3.0.1
        cmake_policy(SET CMP0043 OLD)
    endif()
    if(POLICY CMP0071) # compatibility with CMake 3.10.0
        cmake_policy(SET CMP0071 OLD)
    endif()
endif()

## Project branding, version and package mantainer
project(grSim)
set(VERSION "1.0.0a2")
#set(VENDOR "Parsian")
set(MAINTAINER "Mani Monajjemi <mani.monajjemi@gmail.com>")


# some utils and helper vars
string(TOLOWER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_LOWER)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)
include(${PROJECT_SOURCE_DIR}/cmake/Utils.cmake)
standard_config()
standard_paths(${PROJECT_SOURCE_DIR} bin lib)


# definitions for knowing the OS from the code
if(MSVC)
    add_definitions(-DHAVE_MSVC)
endif()
if(WIN32)
    add_definitions(-DHAVE_WINDOWS)
endif()
if(UNIX)
    add_definitions(-DHAVE_UNIX)
    if(APPLE)
        add_definitions(-DHAVE_MACOSX)
    else()
        #TODO: fix this, say we have FreeBSD, that's not linux
        add_definitions(-DHAVE_LINUX)
    endif()
endif()

# set explicitly the c++ standard to use
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

# add src dir to included directories
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/include/net)
include_directories(${PROJECT_SOURCE_DIR}/include/physics)


## Handling depenendcies

# we will append all libs to this var
set(libs)

# OpenGL
find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIR})
list(APPEND libs ${OPENGL_LIBRARIES})
#find_package(GLUT REQUIRED)
#include_directories(${GLUT_INCLUDE_DIR})

# Qt
if (USE_QT5)
    add_definitions(-D QT5)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    find_package(Qt5Core REQUIRED)
    find_package(Qt5Widgets REQUIRED)
    find_package(Qt5OpenGL REQUIRED)
    find_package(Qt5Network REQUIRED)
    set(QT_LIBRARIES "")
    macro(qt4_wrap_cpp VARNAME)
        set(${VARNAME} "")
    endmacro()
    # wrap functions
    macro(qt4_wrap_ui)
        qt5_wrap_ui(${ARGN})
    endmacro()
    macro(qt4_add_resources)
        qt5_add_resources(${ARGN})
    endmacro()
else()
    set(QT_USE_QTNETWORK true)
    set(QT_USE_QTOPENGL true)
    find_package(Qt4 REQUIRED)
    include(${QT_USE_FILE})
endif()
list(APPEND libs ${QT_LIBRARIES})

# ODE
find_package(ODE REQUIRED)
include_directories(${ODE_INCLUDE_DIRS})
list(APPEND libs ${ODE_LIBRARIES})
#TODO: make this an option
option(DOUBLE_PRECISION "Use double precision? If not single precision will be used." ON)
  if(DOUBLE_PRECISION)
    if(APPLE)
      add_definitions(-DdIDEDOUBLE)
    else()
      add_definitions(-DdDOUBLE)
    endif()
  else()
    if(APPLE)
      add_definitions(-DdIDESINGLE)
    else()
      add_definitions(-DdSINGLE)
    endif()
  endif()

# VarTypes
find_package(VarTypes REQUIRED)
include_directories(${VARTYPES_INCLUDE_DIRS})
list(APPEND libs ${VARTYPES_LIBRARIES})

# Protobuf
find_package(Protobuf REQUIRED)
include_directories(${PROTOBUF_INCLUDE_DIRS})
list(APPEND libs ${PROTOBUF_LIBRARIES})

protobuf_generate_cpp(PROTO_CPP PROTO_H
    src/proto/messages_robocup_ssl_detection.proto
    src/proto/messages_robocup_ssl_geometry.proto
    src/proto/messages_robocup_ssl_wrapper.proto
    src/proto/messages_robocup_ssl_refbox_log.proto
    src/proto/grSim_Replacement.proto
    src/proto/grSim_Commands.proto
    src/proto/grSim_Packet.proto
)

qt4_add_resources(RESOURCES
    resources/textures.qrc
)

set(RESOURCES
    ${RESOURCES}
    resources/grsim.rc
)

set(SOURCES
    src/main.cpp
    src/mainwindow.cpp
    src/glwidget.cpp
    src/graphics.cpp
    src/physics/pworld.cpp
    src/physics/pobject.cpp
    src/physics/pball.cpp
    src/physics/pground.cpp
    src/physics/pfixedbox.cpp
    src/physics/pcylinder.cpp
    src/physics/pbox.cpp
    src/physics/pray.cpp
    src/net/robocup_ssl_server.cpp
    src/net/robocup_ssl_client.cpp
    src/sslworld.cpp
    src/robot.cpp
    src/configwidget.cpp
    src/statuswidget.cpp
    src/logger.cpp
    src/robotwidget.cpp
    src/getpositionwidget.cpp
)

set(HEADERS
    include/mainwindow.h
    include/glwidget.h
    include/graphics.h
    include/physics/pworld.h
    include/physics/pobject.h
    include/physics/pball.h
    include/physics/pground.h
    include/physics/pfixedbox.h
    include/physics/pcylinder.h
    include/physics/pbox.h
    include/physics/pray.h
    include/net/robocup_ssl_server.h
    include/net/robocup_ssl_client.h
    include/sslworld.h
    include/robot.h
    include/configwidget.h
    include/statuswidget.h
    include/logger.h
    include/robotwidget.h
    include/getpositionwidget.h
    include/common.h
    include/config.h
)

# files to be compiled
set(srcs
    ${CONFIG_FILES}
    ${PROTO_CPP}
    ${PROTO_H}
    ${RESOURCES}
    ${HEADERS}
    ${SOURCES}
)

file(GLOB CONFIG_FILES "config/*.ini")
set_source_files_properties(${CONFIG_FILES}  PROPERTIES MACOSX_PACKAGE_LOCATION "config")

if(APPLE)
    set(app ${CMAKE_PROJECT_NAME})
    add_executable(${app} MACOSX_BUNDLE ${srcs})
    target_link_libraries(${app} ${libs})
    install(TARGETS ${app} DESTINATION .)
    set(MACOSX_BUNDLE_ICON_FILE "${PROJECT_SOURCE_DIR}/resources/icons/grsim.icns")
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${VERSION})
    set(MACOSX_BUNDLE_VERSION ${VERSION})
    set(MACOSX_BUNDLE_LONG_VERSION_STRING "Version ${VERSION}")
    set(BUNDLE_APP ${PROJECT_SOURCE_DIR}/bin/${app}.app)
    install(
        CODE "
        include(BundleUtilities)
        fixup_bundle(\"${BUNDLE_APP}\"   \"\"   \"/opt/local/lib;/usr/local/lib\")"
        COMPONENT Runtime)
    set(CPACK_GENERATOR "DragNDrop" "TGZ")
elseif(WIN32)
    set(app ${CMAKE_PROJECT_NAME})
    add_executable(${app} WIN32 ${srcs})
    if(USE_QT5)
        target_link_libraries(${app} ${libs} Qt5::Core Qt5::Widgets Qt5::Network Qt5::OpenGL)
    else()
        target_link_libraries(${app} ${libs})
    endif()
    install(TARGETS ${app} DESTINATION bin)
    install(DIRECTORY config DESTINATION .)
    install(DIRECTORY bin DESTINATION .
            FILES_MATCHING PATTERN "*.dll")
    set(CPACK_PACKAGE_EXECUTABLES ${app} ${app})
else()
    set(app ${CMAKE_PROJECT_NAME_LOWER})
    add_executable(${app} ${srcs})
    if(USE_QT5)
        qt5_use_modules(${app} Widgets Network Core OpenGL)
    endif()
    target_link_libraries(${app} ${libs})
    install(TARGETS ${app} DESTINATION bin)
    install(DIRECTORY config DESTINATION share/${app})
    install(FILES resources/grsim.desktop DESTINATION share/applications)
    install(FILES resources/icons/grsim.svg DESTINATION share/icons/hicolor/scalable/apps)
endif()

option(BUILD_CLIENTS "Choose this option if you want to build the example Qt client." ON)
if(BUILD_CLIENTS)
    add_subdirectory(clients/qt)
endif()

file(COPY README.md LICENSE.md DESTINATION ${CMAKE_BINARY_DIR})
file(RENAME ${CMAKE_BINARY_DIR}/README.md ${CMAKE_BINARY_DIR}/README.txt)
file(RENAME ${CMAKE_BINARY_DIR}/LICENSE.md ${CMAKE_BINARY_DIR}/LICENSE.txt)

## Packaging
if(UNIX)
    execute_process(COMMAND uname -p OUTPUT_VARIABLE ARCH)
    string(STRIP ${ARCH} ARCH)
    if(APPLE)
        set(ARCH "osx-universal")
    endif()
elseif(WIN32)
    set(ARCH "win32")
    set(CPACK_GENERATOR ZIP NSIS)
endif()
set(CPACK_OUTPUT_FILE_PREFIX ${PROJECT_SOURCE_DIR}/dist)
set(CPACK_PACKAGE_CONTACT ${MAINTAINER})
if(VENDOR)
    set(CPACK_PACKAGE_VENDOR ${VENDOR})
    string(TOLOWER ${CPACK_PACKAGE_VENDOR} FLAVOR)
endif()
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_BINARY_DIR}/LICENSE.txt")
set(CPACK_RESOURCE_FILE_README "${CMAKE_BINARY_DIR}/README.txt")
#set(CPACK_RESOURCE_FILE_WELCOME "${CMAKE_SOURCE_DIR}/WELCOME.txt")
set(CPACK_PACKAGE_VERSION ${VERSION})
# Debian based specific
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libode1 (>=0.11), vartypes (>=0.7.0), libqt4-network (>=4.8.0), libqt4-core, libqt4-gui, libqt4-opengl")
if(FLAVOR)
    set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME_LOWER}_${CPACK_PACKAGE_VERSION}-${FLAVOR}_${ARCH}")
else()
    set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME_LOWER}_${CPACK_PACKAGE_VERSION}_${ARCH}")
endif()
include(CPack)

set(COPY_ENABLE_FLAG 0)
set(CXX_BIT 64)
if(WIN32)
    string(REPLACE "/g++.exe" "" RES ${CMAKE_CXX_COMPILER})

    if(COPY_ENABLE_FLAG)
        set(DLL_LIB_LIST ${RES}/zlib1.dll
                ${RES}/libbz2-1.dll
                ${RES}/libfreetype-6.dll
                ${RES}/libglib-2.0-0.dll
                ${RES}/libgraphite2.dll
                ${RES}/libharfbuzz-0.dll
                ${RES}/libiconv-2.dll
                ${RES}/libicudt61.dll
                ${RES}/libicuin61.dll
                ${RES}/libicuuc61.dll
                ${RES}/libintl-8.dll
                ${RES}/libpcre-1.dll
                ${RES}/libpcre2-16-0.dll
                ${RES}/libpng16-16.dll
                ${RES}/libprotobuf.dll
                ${RES}/libstdc++-6.dll
                ${VARTYPES_LIBRARIES}
                ${RES}/libwinpthread-1.dll)
        set(QT5_DEBUG_DLL ${RES}/Qt5Cored.dll
                ${RES}/Qt5Guid.dll
                ${RES}/Qt5Networkd.dll
                ${RES}/Qt5OpenGLd.dll
                ${RES}/Qt5Widgetsd.dll)
        set(QT5_RELEASE_DLL ${RES}/Qt5Core.dll
                ${RES}/Qt5Gui.dll
                ${RES}/Qt5OpenGL.dll
                ${RES}/Qt5Network.dll
                ${RES}/Qt5Widgets.dll)
        if(CMAKE_BUILD_TYPE STREQUAL Debug)
            list(APPEND DLL_LIB_LIST ${QT5_DEBUG_DLL})
        endif()
        if (CXX_BIT STREQUAL 64)
            list(APPEND DLL_LIB_LIST ${RES}/libgcc_s_seh-1.dll)
        else()
            list(APPEND DLL_LIB_LIST ${RES}/libgcc_s_dw2-1.dll)
        endif()
        if(CMAKE_BUILD_TYPE STREQUAL Release)
            list(APPEND DLL_LIB_LIST ${QT5_RELEASE_DLL})
        endif()

        file(COPY ${DLL_LIB_LIST} DESTINATION ../bin)
    endif()
endif()


